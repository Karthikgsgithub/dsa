#include <stdio.h>
int a[20][20], s[20], n, i, j, visited[20];
int reach[10], top = -1, count = 0;
/*********Reachability using DFS**********/
void Reachability(int v)
{
for (i = 1; i <= n; i++)
{
if (a[v][i] && !visited[i])
s[++top] = i;
}
if (top >= 0)
{
visited[s[top]] = 1;
Reachability(s[top--]);
}
}
/*****Connectivity using DFS*********/
void Connectivity(int v)
{
int i;
reach[v] = 1;
for (i = 1; i <= n; i++)
{
if (a[v][i] && !reach[i])
{
printf("\n %d->%d", v, i);
count++;
Connectivity(i);
}
}
}
void main()
{
int v, choice;
printf("\n Enter the number of cities: ");
scanf("%d", &n);
for (i = 1; i <= n; i++)
{
visited[i] = 0;
reach[i] = 0;
}
printf("\n Enter digraph data in matrix form:\n");
for (i = 1; i <= n; i++)
for (j = 1; j <= n; j++)
scanf("%d", &a[i][j]);
printf("\n1.Test for reachability");
printf("\n2.Test for connectivity");
printf("\n3.Exit");
while (1)
{
printf("\nEnter Your Choice: ");
scanf("%d", &choice);
switch (choice)
{
case 1:
printf("Enter the source vertex: ");
scanf("%d", &v);
if ((v < 1) || (v > n))
{
printf("\nEnter a valid source vertex");
}
else
{
visited[v] = 1;
Reachability(v);
printf("The reachable nodes from node %d:\n", v);
for (i = 1; i <= n; i++)
if (visited[i] && i != v)
printf("node %d\n", i);
}
break;
case 2:
Connectivity(1);
if (count == n - 1)
printf("\nGraph is connected\n");
else
printf("\n Graph is not connected");
break;
case 3:
return;
default:
printf("\nEnter proper Choice");
}
}
}
