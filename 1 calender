#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define max_string_length 100
#define num_days 7
// structure to represent a day
struct day
{
char *name;
int date;
char *activity;
};
// function to create a day with dynamic memory allocation
struct day *create()
{
struct day *newday = (struct day *)malloc(sizeof(struct day));
if (newday == NULL)
{
printf("memory allocation failed");
exit(0);
}
newday->name = (char *)malloc(max_string_length);
newday->activity = (char *)malloc(max_string_length);
if (newday->name == NULL || newday->activity == NULL)
{
printf("memory allocation failed");
exit(0);
}
return newday;
}
// function to read data for a day
void read(struct day *day)
{
printf("enter the name of the day: ");
scanf("%s", day->name);
printf("enter the date of the day: ");
scanf("%d", &day->date);
printf("enter the activity for the day: ");
scanf(" %[^\n]s", day->activity);
}
// function to display the calendar
void display(struct day *calendar[])
{
printf("calendar:\n");
for (int i = 0; i < num_days; i++)
{
printf("day %d:\n", i + 1);
printf("name: %s\n", calendar[i]->name);
printf("date: %d\n", calendar[i]->date);
printf("activity: %s\n", calendar[i]->activity);
printf("\n---------------------------------------\n");
}
}
int main()
{
struct day *calendar[num_days];
// create a calendar for 7 days
for (int i = 0; i < num_days; i++)
{
calendar[i] = create();
}
// read data for each day
for (int i = 0; i < num_days; i++)
{
printf("enter details for day %d:\n", i + 1);
read(calendar[i]);
}
// display the calendar
display(calendar);
// free dynamically allocated memory
for (int i = 0; i < num_days; i++)
{
free(calendar[i]->name);
free(calendar[i]->activity);
free(calendar[i]);
}
return 0;
}
